name: "chapter 09: red green deployment globoticket"
env:
  appname: globoticket
  resourcegroup: actionsinaction
  slotname: staging
on:
  release: 
     types: [published] 
     
jobs:
# We start with deploying the application to Azure Web App. 
# We pull the zip file artifact that contains the web application from the
# release and use it directly to deploy to the web app. After deployment, we 
# generate output, which is the URL we can use to validate the deployment. 
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: 'staging'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    outputs:
      homepage: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    steps:
      - name: get release artifacts for deployment
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          version: ${{ github.event.release.id }}
          regex: true
          file: ".*"
          target: './'

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_DEPLOY }}
        
      - name: Create Deployment Slot Staging
        uses: Azure/cli@v1.0.7
        with:
          inlineScript: |
            az webapp deployment slot create --name ${{env.appname}} --resource-group ${{env.resourcegroup}} --slot ${{env.slotname}}
          
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: '${{env.appname}}'
          slot-name: '${{env.slotname}}'
          package: ./frontend.zip
           
  validate:
  # We use the output from the deploy job to validate the deployment. 
  # this contains the URL we can feed into our playwright tests that will 
  # validate the deployment. the tests will generate a report that is output
  # to the GitHub Actions UI. This way we can simply see the output 
  # results as part of the action run.
    runs-on: ubuntu-latest
    needs: deploy
    environment:
      name: 'staging'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v4
      - name: print env
        run: echo $homepage
        env: 
          homepage: ${{ needs.deploy.outputs.homepage }}        
      - name: Install playwright
        run:  npm init playwright@latest
          
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x   
      
      - name: Install playwright 
        run:  dotnet tool install --global Microsoft.Playwright.CLI
# Before we start our PlayWright Tests, we use the available health endpoint
# on the application to check if the application is healthy. We do this by
# polling the health endpoint until it returns a status that signals healthy. # This way, we can ensure the application is ready to be tested.     
      - name: ensure deployment is healthy before we test
        run: |
            response=$(curl -s "${homepage}/health/ready")
            status=$(echo "$response" | jq -r '.status')
  
            while [[ "$status" != "Healthy" ]]; do
              echo "Waiting for health endpoint..."
              sleep 1
              response=$(curl -s "${homepage}/health/ready")
              status=$(echo "$response" | jq -r '.status')
            done
            echo "Health endpoint current status :" $status
        env: 
          homepage: ${{ needs.deploy.outputs.homepage }}
      - name: Run tests
        run: dotnet test Tests.Playwright/Tests.Playwright.csproj
        env: 
          homepage: ${{ needs.deploy.outputs.homepage }}
# Here, we move to the next stage, where we will accept 10% traffic to
# the staging slot. The environment provides a way to move 
# gradually to higher percentages of traffic. We do this by setting
# in the GitHub UI the environment wait timer to 1 minute. This way, we can
# see the traffic move gradually. In the meantime, you can monitor the 
# application behavior and decide to abort when needed. 
  staging10:
    runs-on: ubuntu-latest
    needs: validate
    environment:
      name: 'staging10'
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_DEPLOY }}
    - name: TenPercent
      uses: Azure/cli@v1.0.7
      with:
        inlineScript: |
          az webapp traffic-routing set --distribution ${{env.slotname}}=10  --name ${{env.appname}} --resource-group ${{env.resourcegroup}}
 #Same as previous step, but now trafic percentage moves to 30%
  staging30:
    runs-on: ubuntu-latest
    needs: staging10
    environment:
      name: 'staging30'
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_DEPLOY }}
    - name: TenPercent
      uses: Azure/cli@v1.0.7
      with:
        inlineScript: |
          az webapp traffic-routing set --distribution ${{env.slotname}}=30  --name ${{env.appname}} --resource-group ${{env.resourcegroup}}
# we are now confident the application behaves as expected, can handle real
# production trafic and we are ready to move to move the application to
# production for 100%. We do this by swapping the staging slot with the 
# production slot.          
  VipSwap:
    runs-on: ubuntu-latest
    needs: staging30
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_DEPLOY }}
      - name: vip swap
        uses: Azure/cli@v1.0.7
        with:
          inlineScript: |
            az webapp deployment slot swap --slot ${{env.slotname}}  --name ${{env.appname}} --resource-group ${{env.resourcegroup}}

      - name: clear Routing rules (100% to production)
        uses: Azure/cli@v1.0.7
        with:
          inlineScript: |
            az webapp traffic-routing clear --name ${{env.appname}} --resource-group ${{env.resourcegroup}}

# We are now done with the staging slot, so we can delete it. 
# This will also clear any routing rules we set so we can start
# from a clean slate for the next deployment.
      - name: clear staging slot
        uses: Azure/cli@v1.0.7
        with:
          inlineScript: |
           az webapp deployment slot delete --name ${{env.appname}} --resource-group ${{env.resourcegroup}} --slot ${{env.slotname}}

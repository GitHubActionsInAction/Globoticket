name: "chapter 09: deploy-frontend-container"
permissions:
  actions: write
  packages: write
  contents: read

env:
  deploymentFile: 'frontend.yaml'
  namespace: 'globoticket'
  GH_TOKEN: ${{ github.token }} #required for gh tool
  
on:
  release: 
     types: [published] 
  workflow_dispatch:

jobs:
  deploy-staging:
    outputs:
      homepage: ${{ steps.set-homepage.outputs.homepage }}
    runs-on: ubuntu-latest
    environment:
      name: 'staging'
    steps:
      - name: Get Latest Release
        id: latest_release
        run: |
          LATEST_RELEASE=$(gh api /repos/${{github.repository}}/releases/latest --jq .id)
          echo "Latest Release: $LATEST_RELEASE"
          echo "::set-output name=latest_release::$LATEST_RELEASE"

      - name: get release artifacts for deployment, picks data from latest release
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          version: ${{ steps.latest_release.outputs.latest_release }}
          regex: true
          file: ".*"
          target: './'

      - name: set kubernetes context
        uses: azure/k8s-set-context@v3
        id: setcontext
        with:
          method: kubeconfig
          kubeconfig: ${{secrets.KUBECONFIG}} 
 
      - name: provide pull secrets so we can pull the image from gitHub
        uses: azure/k8s-create-secret@v4
        with:
            namespace: '${{env.namespace}}'
            secret-name: 'pullsecret'
            container-registry-url: 'ghcr.io'
            container-registry-username: ${{ github.actor }}
            container-registry-password: ${{ secrets.EXTENDED_ACCESSTOKEN }}

      - name: Deploy to AKS
        uses: Azure/k8s-deploy@v4
        with:
          namespace: '${{env.namespace}}'
          manifests: |
             ./${{env.deploymentFile}}
      
      - name: set homepage from deployment
        id: set-homepage
        run: |
          export homepage=$(kubectl get svc frontend --namespace ${{env.namespace}} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "homepage=$homepage" >> $GITHUB_OUTPUT


   
  verify-staging:
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment:
      name: 'staging'
    steps:  
      - name: get homepage variable from previous job
        run: |
          echo "homepage=http://${{needs.deploy-staging.outputs.homepage}}"
     
      - name: Install playwright 
        run:  dotnet tool install --global Microsoft.Playwright.CLI
      
      - name: Run tests
        run: |
          dotnet test Tests.Playwright/Tests.Playwright.csproj 
                      --logger "liquid.md;logfilename=testResults.md"
      - name: Output the results to the actions jobsummary
        if: always()
        run: cat $(find . -name testResults.md) >> $GITHUB_STEP_SUMMARY
           
  deploy-production:
    runs-on: ubuntu-latest
    needs: verify-staging
    environment:
      name: 'production'
    steps:
      - name: Get Latest Release
        id: latest_release
        run: |
          LATEST_RELEASE=$(gh api /repos/${{github.repository}}/releases/latest --jq .id)
          echo "Latest Release: $LATEST_RELEASE"
          echo "::set-output name=latest_release::$LATEST_RELEASE"

      - name: get release artifacts for deployment, picks data from latest release
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          version: ${{ steps.latest_release.outputs.latest_release }}
          regex: true
          file: ".*"
          target: './'

      - name: set kubernetes context
        uses: azure/k8s-set-context@v3
        id: setcontext
        with:
          method: kubeconfig
          kubeconfig: ${{secrets.KUBECONFIG}} 
 
      - name: provide pull secrets so we can pull the image from gitHub
        uses: azure/k8s-create-secret@v4
        with:
            namespace: '${{env.namespace}}'
            secret-name: 'pullsecret'
            container-registry-url: 'ghcr.io'
            container-registry-username: ${{ github.actor }}
            container-registry-password: ${{ secrets.EXTENDED_ACCESSTOKEN }}

      - name: Deploy to AKS
        uses: Azure/k8s-deploy@v4
        with:
          namespace: '${{env.namespace}}'
          manifests: |
             ./${{env.deploymentFile}}
